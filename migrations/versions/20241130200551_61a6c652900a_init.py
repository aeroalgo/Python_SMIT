"""init

Revision ID: 61a6c652900a
Revises: 
Create Date: 2024-11-30 20:05:51.502681

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '61a6c652900a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('actionsozon',
    sa.Column('date_template_uploaded', sa.TIMESTAMP(), nullable=True),
    sa.Column('vendor_code', sa.String(), nullable=True),
    sa.Column('vendor_code_mp', sa.String(), nullable=True),
    sa.Column('product_mp_id', sa.BigInteger(), nullable=True),
    sa.Column('sku', sa.BigInteger(), nullable=True),
    sa.Column('action_id', sa.Integer(), nullable=True),
    sa.Column('hotsale_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('card_title', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('date_start', sa.TIMESTAMP(), nullable=True),
    sa.Column('date_end', sa.TIMESTAMP(), nullable=True),
    sa.Column('action_category', sa.String(), nullable=True),
    sa.Column('old_price', sa.Integer(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.Column('min_price', sa.Integer(), nullable=True),
    sa.Column('discount_required', sa.Float(precision=2), nullable=True),
    sa.Column('max_action_price', sa.Integer(), nullable=True),
    sa.Column('is_in_action', sa.Boolean(), nullable=True),
    sa.Column('price_action', sa.Integer(), nullable=True),
    sa.Column('price_action_vp', sa.Float(precision=2), nullable=True),
    sa.Column('stock', sa.Integer(), nullable=True),
    sa.Column('stock_recommended', sa.Integer(), nullable=True),
    sa.Column('stock_mp', sa.Integer(), nullable=True),
    sa.Column('stock_owner', sa.Integer(), nullable=True),
    sa.Column('rejection_reason', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('changelog', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::json"), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='public',
    comment='ActionsOzon'
    )
    op.create_table('card',
    sa.Column('vendor_code_mp', sa.String(), nullable=True),
    sa.Column('vendor_code', sa.String(), nullable=True),
    sa.Column('product_mp_id', sa.BigInteger(), nullable=True),
    sa.Column('barcode', sa.String(), nullable=True),
    sa.Column('sku', sa.BigInteger(), nullable=True),
    sa.Column('sku_fbs', sa.BigInteger(), nullable=True),
    sa.Column('supervisor_comment', sa.String(), nullable=True),
    sa.Column('manager_comment', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('created', 'expected', 'new', 'current', 'invalid', 'sale', 'archive', 'china_sale', 'new_sale', name='cardstatusenum', schema='public'), server_default='new', nullable=True),
    sa.Column('required_review', sa.Boolean(), nullable=True),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('object', sa.String(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('is_experimental', sa.Boolean(), nullable=True),
    sa.Column('spp_vp', sa.Float(), nullable=True),
    sa.Column('cost_for_game', sa.Integer(), nullable=True),
    sa.Column('cost_final', sa.Integer(), nullable=True),
    sa.Column('price_change_status', sa.Enum('not_selected', 'transmitted_today', 'transmitted_less_than_2_hours', 'consideration_team_lead', 'approved_team_lead', 'rejected_team_leader', 'rejected_time_70_hours', 'aborted_5_minutesago', 'current_price_different', 'no_price_change', name='pricechangestatusenum', schema='public'), nullable=True),
    sa.Column('price_change_reason', sa.Enum('not_selected', 'shortage', 'arrival', 'low_gross', 'high_gross', 'dumping_competitors', 'dumping_promotion', 'action', 'test', 'promotion', 'kick', 'greed', 'spp', 'rollback_base', name='pricechangereasonenum', schema='public'), nullable=True),
    sa.Column('price_change_request_reason', sa.Enum('min_cost_final_vp_for_alert_sale_vtmp', 'min_diff_cost_now_to_final_for_alert_sale_vtmp', 'min_cost_final_vp_for_alert_vtmp', 'min_diff_cost_now_to_final_for_alert_vtmp', 'min_cost_final_vp_for_alert_gfg', 'min_diff_cost_now_to_final_for_alert_gfg', 'min_cost_final_vp_for_alert_sale_gfg', 'max_cost_final_vp_for_alert_sale_gfg', 'max_vp_cost_final_for_popup_gfg', 'min_vp_cost_final_for_popup_gfg', 'min_vp_cost_final_for_popup_sale_vtmp', 'max_vp_cost_final_for_popup_vtmp', name='pricechangerequestreasonenum', schema='public'), nullable=True),
    sa.Column('discount', sa.Float(), nullable=True),
    sa.Column('action_price', sa.Integer(), nullable=True),
    sa.Column('is_in_action_compensation', sa.Boolean(), nullable=True),
    sa.Column('abc', sa.String(), nullable=True),
    sa.Column('abc_segment', sa.String(), nullable=True),
    sa.Column('vendor_code_segment', sa.Integer(), nullable=True),
    sa.Column('site_vp', sa.Float(), nullable=True),
    sa.Column('average_vp', sa.Float(), nullable=True),
    sa.Column('cost_for_game_vp', sa.Float(), nullable=True),
    sa.Column('cost_final_vp', sa.Float(), nullable=True),
    sa.Column('vp_action_price', sa.Float(), nullable=True),
    sa.Column('date_created_mp', sa.TIMESTAMP(), nullable=True),
    sa.Column('min_price', sa.Integer(), nullable=True),
    sa.Column('type', sa.Enum('FBO', 'FBS', name='cardtypeenum', schema='public'), nullable=True),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('experiment_seo', sa.Boolean(), nullable=True),
    sa.Column('discount_wb', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('changelog', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::json"), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='public',
    comment='Карточки товаров на меркетплейсах'
    )
    op.create_table('user',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('changelog', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::json"), nullable=True),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True, comment='Хэш пароля'),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=True),
    sa.Column('is_staff', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('allow_basic_login', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('aliases', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('picture', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='public',
    comment='User'
    )
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('cookie', sa.String(), nullable=True),
    sa.Column('access_token', sa.String(), nullable=True),
    sa.Column('refresh_token', sa.String(), nullable=True),
    sa.Column('token_type', sa.String(), nullable=True),
    sa.Column('expires_at', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['public.user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='public',
    comment='Sessions'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sessions', schema='public')
    op.drop_table('user', schema='public')
    op.drop_table('card', schema='public')
    op.drop_table('actionsozon', schema='public')
    # ### end Alembic commands ###
